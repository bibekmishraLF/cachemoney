#!/usr/bin/env bash

# Single command to retrieve session token and export required environment variables for AWS CLI MFA
# Must be sourced (run with an existing shell process) to enable authorized access to AWS resources via CLI
# Requires user to set the environment variable AWS_MFA_DEVICE_ARN to the ARN of their MFA device.
# This can be done once and stored as a profile variable.

# Remove temporary variables and files to minimize side effects on the calling shell
function cleanup () {
    unset AccessKeyID SecretAccessKey SessionToken Expiration
    unset re retVal
    rm -f /tmp/mfa_json /tmp/mfa_error
}

if [[ $_ == $0 ]]; then
    >&2 printf "This script must be sourced so it can update your environment variables.\n"
    >&2 printf "Examples:\n. mfa <your six AWS MFA digit token code> [profile_name]\nsource mfa <your six-digit code> [profile_name]\n"
    exit 1
fi

if [[ -z "$AWS_MFA_DEVICE_ARN" ]]; then
    >&2 printf "The environment variable AWS_MFA_DEVICE_ARN must be set to the ARN of your MFA device.\n"
    return 2
fi

re='^[0123456789]{6}$'
if [[ ! $1 =~ $re ]]; then
    >&2 printf "Enter your six-digit AWS MFA token.\n"
    cleanup
    return 3
fi

profile_name="${2:-default}" # Use "default" if no profile name is provided

unset AWS_SESSION_TOKEN AWS_SESSION_EXPIRATION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_EXPIRATION

aws sts get-session-token --serial-number "$AWS_MFA_DEVICE_ARN" --token-code "$1" --profile "$profile_name" 2>/tmp/mfa_error 1>/tmp/mfa_json

retVal="$?"
if [[ $retVal -eq "0" ]]; then
    # Convert JSON to key-value pairs and use them to set shell variables
    for keyval in $(grep -E '": [^\{]' /tmp/mfa_json | sed -e 's/: /=/' -e "s/\(\,\)$//"); do
        eval export $keyval
    done
    # Set the environment variables required to enable the session
    export AWS_ACCESS_KEY_ID=$AccessKeyId
    export AWS_SECRET_ACCESS_KEY=$SecretAccessKey
    export AWS_SESSION_TOKEN=$SessionToken

    # Expiration is not necessary for access. Just for reference.
    export AWS_SESSION_EXPIRATION=$Expiration

    # Set MFA for docker
    echo AWS_MFA_DEVICE_ARN=$AWS_MFA_DEVICE_ARN > .aws_env
    echo AWS_ACCESS_KEY_ID=$AccessKeyId >> .aws_env
    echo AWS_SESSION_TOKEN=$SessionToken >> .aws_env
    echo AWS_SECRET_ACCESS_KEY=$SecretAccessKey >> .aws_env
    echo AWS_SESSION_EXPIRATION=$Expiration >> .aws_env
    cleanup
else
    >&2 printf "Session token retrieval failed. Here is the AWS error message:\n"
    cat /tmp/mfa_error
    cleanup
    return 4
fi

